name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, edited, labeled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick validation
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Detect changed paths (docs/meta vs code)
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          docs:
            - '**/*.md'
            - 'LICENSE'
            - '.github/**'
            - 'docs/**'
          code:
            - 'src/**'
            - 'public/**' 
            - 'tests/**'
            - 'package*.json'
            - '*.config.*'
            - 'tsconfig.json'
            - 'vite.config.ts'
            - 'vitest.config.ts'
    
    - name: Read latest commit message
      id: msg
      run: |
        echo "msg<<EOF" >> $GITHUB_OUTPUT
        git log -1 --pretty=%B >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Evaluate skip/force conditions
      id: gate
      shell: bash
      run: |
        title='${{ github.event.pull_request.title || '' }}'
        msg='${{ steps.msg.outputs.msg || '' }}'
        labels=$(jq -r '.pull_request.labels[].name // empty' "$GITHUB_EVENT_PATH" 2>/dev/null || true)
        
        docs_changed='${{ steps.changes.outputs.docs }}'
        code_changed='${{ steps.changes.outputs.code }}'

        should_skip_global=false
        should_force=false

        for token in '[skip ci]' '[ci skip]' '[no ci]' '[skip actions]' '[actions skip]' '[skip pr]' '[pr skip]'; do
          if echo "$title$msg" | grep -qi "$token"; then should_skip_global=true; fi
        done

        for token in '[force ci]' '[ci force]' '[force pr]' '[pr force]' '/ci run' '/run ci'; do
          if echo "$title$msg" | grep -qi "$token"; then should_force=true; fi
        done
        if echo "$labels" | grep -qi '\bci:force\b'; then should_force=true; fi

        docs_only=false
        if [ "$code_changed" != "true" ] && [ "$docs_changed" = "true" ]; then
          docs_only=true
        fi

        echo "global=$should_skip_global" >> $GITHUB_OUTPUT
        echo "force=$should_force" >> $GITHUB_OUTPUT
        echo "docs_only=$docs_only" >> $GITHUB_OUTPUT
    
    - name: Early exit for docs-only changes (unless forced)
      if: ${{ steps.gate.outputs.force != 'true' && steps.gate.outputs.docs_only == 'true' }}
      run: |
        echo "Docs/meta-only change detected. PR checks skipped. Add [force ci] or label 'ci:force' to run anyway." >> $GITHUB_STEP_SUMMARY
        exit 0

    - name: Fail early if skip requested (for visibility)
      if: ${{ steps.gate.outputs.force != 'true' && steps.gate.outputs.global == 'true' }}
      run: |
        echo "PR checks skipped due to skip token in PR title or commit message." >> $GITHUB_STEP_SUMMARY
        exit 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Validate package.json
      run: npm run validate || echo "No validate script found"
    
    - name: Check TypeScript compilation
      run: npx vue-tsc --noEmit
    
    - name: Run all tests
      run: npm run test:all

  # Test different scenarios
  test-matrix:
    name: Test Matrix
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !cancelled() && (needs.validate.result == 'success' || needs.validate.result == 'skipped') }}
    
    strategy:
      fail-fast: false
      matrix:
        test-group: ['unit', 'integration', 'e2e']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ${{ matrix.test-group }} tests
      run: |
        case "${{ matrix.test-group }}" in
          "unit")
            # Run unit-style suites (components, api, utils) and the root debug-config test
            npm run test:run -- \
              --reporter=verbose \
              tests/components \
              tests/api \
              tests/utils \
              debug-config.test.ts
            ;;
          "integration")
            # Run all integration tests in their current folder structure
            npm run test:run -- --reporter=verbose tests/integration
            ;;
          "e2e")
            # Use the standalone goal-system tests as an end-to-end smoke check
            npm run test:standalone
            ;;
        esac

  # Check for breaking changes
  breaking-changes:
    name: Breaking Changes Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check for API changes
      run: |
        echo "Checking for potential breaking changes..."
        # Fetch main branch for comparison
        git fetch origin main:main || git fetch origin main || echo "Could not fetch main branch"
        
        # Compare with main branch if available
        if git rev-parse --verify main >/dev/null 2>&1; then
          git diff main...HEAD --name-only | grep -E '\.(vue|ts|js)$' | while read file; do
            echo "Checking $file for breaking changes..."
            if git diff main...HEAD "$file" | grep -E '^-.*export|^-.*interface|^-.*type' >/dev/null; then
              echo "⚠️  Potential breaking change detected in $file"
            fi
          done || echo "No breaking changes detected"
        else
          echo "Main branch not available, skipping breaking change detection"
        fi
    
    - name: Build comparison
      run: |
        echo "Building current branch..."
        npm run build
        mv dist dist-current
        
        echo "Attempting to build main branch for comparison..."
        if git rev-parse --verify main >/dev/null 2>&1; then
          git checkout main
          npm ci
          npm run build
          mv dist dist-main
          
          echo "Comparing build outputs..."
          diff -r dist-main dist-current || echo "Build outputs differ - this is normal for feature branches"
        else
          echo "Main branch not available, skipping build comparison"
        fi

  # Performance check
  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for performance analysis
      run: npm run build
    
    - name: Bundle size analysis
      run: |
        echo "## Bundle Size Analysis 📦" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|" >> $GITHUB_STEP_SUMMARY
        find dist -name "*.js" -o -name "*.css" | while read file; do
          size=$(du -h "$file" | cut -f1)
          echo "| ${file#dist/} | $size |" >> $GITHUB_STEP_SUMMARY
        done
    
    - name: Test performance
      run: |
        echo "Running performance tests..."
        npm run test:run -- --reporter=verbose

  # PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [validate, test-matrix, breaking-changes, performance]
    if: always()
    
    steps:
    - name: Generate PR Summary
      run: |
        echo "## Pull Request Check Results 🔍" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Validation | ${{ needs.validate.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Test Matrix | ${{ needs.test-matrix.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Breaking Changes | ${{ needs.breaking-changes.result == 'success' && '✅ No Issues' || '⚠️ Check Required' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance.result == 'success' && '✅ Good' || '⚠️ Check Required' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All checks passed - Ready for review" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Review test coverage and performance metrics" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 Ensure documentation is updated if needed" >> $GITHUB_STEP_SUMMARY
