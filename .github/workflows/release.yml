name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-release:
    name: Pre-Release Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test:run
      - name: Type check
        run: npx vue-tsc --noEmit
      - name: Security audit
        run: npm audit --audit-level=high || echo "No high vulnerabilities"
      - name: Build application
        run: npm run build

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: pre-release
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build for production
        run: npm run build
      - name: Create artifacts
        run: |
          cd dist
          zip -r ../fasting-frontend-${{ needs.pre-release.outputs.version }}.zip .
          cd ..
          tar -czf fasting-frontend-${{ needs.pre-release.outputs.version }}.tar.gz -C dist .
      - name: Generate release notes
        run: |
          echo "# Release Notes for ${{ needs.pre-release.outputs.version }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Changes" >> RELEASE_NOTES.md
          git log --oneline --no-merges "$(git describe --tags --abbrev=0 HEAD^)"..HEAD >> RELEASE_NOTES.md || echo "Initial release" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Build & Tests" >> RELEASE_NOTES.md
          echo "- Build: âœ…" >> RELEASE_NOTES.md
          echo "- Unit tests: âœ…" >> RELEASE_NOTES.md
          echo "- Type-check: âœ…" >> RELEASE_NOTES.md
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.pre-release.outputs.version }}
          name: Release ${{ needs.pre-release.outputs.version }}
          target_commitish: ${{ github.sha }}
          body_path: RELEASE_NOTES.md
          files: |
            fasting-frontend-${{ needs.pre-release.outputs.version }}.zip
            fasting-frontend-${{ needs.pre-release.outputs.version }}.tar.gz
          draft: false
          prerelease: ${{ contains(needs.pre-release.outputs.version, '-') }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-release, release]
    if: success() && !contains(needs.pre-release.outputs.version, '-')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
      - name: Deploy
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "Add your deploy command here."

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [pre-release, release, deploy]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Release Notification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
