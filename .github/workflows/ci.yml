name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, FEAT/* ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, edited, labeled, ready_for_review]
  workflow_dispatch:
    inputs:
      force:
        description: "Force CI run even if only docs/meta changed"
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Detect changed paths (docs/meta vs code)
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docs:
              - '**/*.md'
              - 'LICENSE'
              - '.github/**'
              - 'docs/**'
            code:
              - 'src/**'
              - 'public/**'
              - 'tests/**'
              - 'package*.json'
              - '*.config.*'
              - 'tsconfig.json'
              - 'vite.config.ts'
              - 'vitest.config.ts'

      - name: Read latest commit message
        id: msg
        run: |
          echo "msg<<EOF" >> $GITHUB_OUTPUT
          git log -1 --pretty=%B >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Evaluate skip/force conditions
        id: gate
        shell: bash
        run: |
          title='${{ github.event.pull_request.title || '' }}'
          msg='${{ steps.msg.outputs.msg || '' }}'
          base='${{ github.event.pull_request.base.ref || 'develop' }}'
          labels=$(jq -r '.pull_request.labels[].name // empty' "$GITHUB_EVENT_PATH" 2>/dev/null || true)
          
          is_dispatch='${{ github.event_name == 'workflow_dispatch' }}'
          force_input='${{ inputs.force }}'
          docs_changed='${{ steps.changes.outputs.docs }}'
          code_changed='${{ steps.changes.outputs.code }}'

          should_skip_global=false
          should_skip_dev=false
          should_force=false

          for token in '[skip ci]' '[ci skip]' '[no ci]' '[skip actions]' '[actions skip]'; do
            if echo "$title$msg" | grep -qi "$token"; then should_skip_global=true; fi
          done
          if echo "$title$msg" | grep -qi '\[skip dev-ci\]'; then should_skip_dev=true; fi

          for token in '[force ci]' '[ci force]' '/ci run' '/run ci'; do
            if echo "$title$msg" | grep -qi "$token"; then should_force=true; fi
          done
          if echo "$labels" | grep -qi '\bci:force\b'; then should_force=true; fi
          if [ "$is_dispatch" = "true" ] && [ "$force_input" = "true" ]; then should_force=true; fi

          docs_only=false
          if [ "$code_changed" != "true" ] && [ "$docs_changed" = "true" ]; then
            docs_only=true
          fi

          echo "global=$should_skip_global" >> $GITHUB_OUTPUT
          echo "dev=$should_skip_dev" >> $GITHUB_OUTPUT
          echo "force=$should_force" >> $GITHUB_OUTPUT
          echo "base=$base" >> $GITHUB_OUTPUT
          echo "docs_only=$docs_only" >> $GITHUB_OUTPUT

      - name: Early exit for docs-only changes (unless forced)
        if: ${{ steps.gate.outputs.force != 'true' && steps.gate.outputs.docs_only == 'true' }}
        run: |
          echo "Docs/meta-only change detected. CI skipped. Add [force ci] label 'ci:force' or dispatch with force=true to run anyway." >> $GITHUB_STEP_SUMMARY
          exit 0

      - name: Fail early if skip requested (for visibility)
        if: ${{ steps.gate.outputs.force != 'true' && (steps.gate.outputs.global == 'true' || (steps.gate.outputs.base == 'develop' && steps.gate.outputs.dev == 'true')) }}
        run: |
          echo "CI skipped due to skip token in PR title or commit message." >> $GITHUB_STEP_SUMMARY
          exit 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint || echo "No lint script found, skipping..."
      - name: Run type checking
        run: npx vue-tsc --noEmit
      - name: Run all tests
        run: npm run test:all:ci
      - name: Upload coverage reports
        if: matrix.node-version == '22.x'
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          verbose: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !cancelled() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !cancelled() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run security audit
        run: npm audit --audit-level high
      - name: Run vulnerability scan
        run: npx audit-ci --config .audit-ci.json || echo "No audit config found, using defaults"

  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !cancelled() && (needs.test.result == 'success' || needs.test.result == 'skipped') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check bundle size
        run: npm run build && npx bundlesize || echo "No bundlesize config found"
      - name: Run dependency check
        run: npx depcheck || echo "Depcheck completed with warnings"

  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test, build, security, quality]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## CI/CD Pipeline Results 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Handle test result
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "| Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test.result }}" = "skipped" ]; then
            echo "| Tests | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Handle other job results
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" = "skipped" ]; then
            echo "| Build | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security.result }}" = "success" ]; then
            echo "| Security | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security.result }}" = "skipped" ]; then
            echo "| Security | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.quality.result }}" = "success" ]; then
            echo "| Quality | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.quality.result }}" = "skipped" ]; then
            echo "| Quality | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Quality | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add skip/force information if tests were skipped
          if [ "${{ needs.test.result }}" = "skipped" ]; then
            echo "### Skip/Force Information ℹ️" >> $GITHUB_STEP_SUMMARY
            echo "CI was skipped. To force execution:" >> $GITHUB_STEP_SUMMARY
            echo "- Add \`[force ci]\` to commit message or PR title" >> $GITHUB_STEP_SUMMARY
            echo "- Add \`ci:force\` label to PR" >> $GITHUB_STEP_SUMMARY  
            echo "- Use workflow dispatch with force=true" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports are uploaded to Codecov for detailed analysis." >> $GITHUB_STEP_SUMMARY
